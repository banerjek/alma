
RECORDS=$(cat oral.xml)

#######################################################
# ROOT_ELEMENT will be stripped
# RECORD_ELEMENT is the next level up and
# identifies where records are marked
ROOT_ELEMENT="collection"
RECORD_ELEMENT="record"
##############################################################
# pull out 245s, 843, 852, and 856
###############################################################
#
# -t indicates template, -m indicates XPATH expression to match
# -n indicates to print a newline
# -o means to print whatever text follows it
# -c means to count whatever follows 
# -v is value of (as in "value-of-select" in XSLT"
#
# Extract control number so that bulletproof paths can be made for repeated fields later
newline=$(echo -e "$\n")
RECORD_IDS=$(echo $RECORDS |  tr -d '\n\r' | sed 's/^.*<${ROOT_ELEMENT}>//' |sed 's/<\/${ROOT_ELEMENT}>.*$//' | sed "s/${RECORD_ELEMENT}><${RECORD_ELEMENT}>/${RECORD_ELEMENT}>${newline}<${RECORD_ELEMENT}>/g")
IFS="${newline}"
record_array=($RECORD_IDS)

for RECORD in ${record_array[@]}; do
	echo "<?xml version='1.0' encoding='UTF-8' ?>$RECORD" |xmlstarlet sel -T  -t -m "/record" -n \
	-v 'controlfield[@tag="001"]' -o '	' \
	-v 'datafield[@tag="245"]/subfield[@code="a"]' -o '	' \
	-m "datafield[@tag='500']" -v 'subfield[@code="a"]' -o ';' \
	-m "datafield[@tag='505']" -v 'subfield[@code="a"]' -o ';' \
	-m "datafield[@tag='520']" -v 'subfield[@code="a"]' -o ';' \
	-m "datafield[@tag='545']" -v 'subfield[@code="a"]' -o ';' \
	-m "datafield[@tag='650']" -v 'subfield[@code="a"]' -i 'subfield[@code="x"]' -o '--' -v 'subfield[@code="x"]' -b -o ';' 

done
